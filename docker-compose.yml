version: "3.7"
services:
  transaction-migration:
    container_name: transaction-migration
    networks:
      - challenge-network
    build:
      context: ./transaction-service
      dockerfile: migrations.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
  transaction-service:
    container_name: transaction-service
    networks:
      - challenge-network
    build:
      context: ./transaction-service
      dockerfile: server.Dockerfile
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  transaction-worker:
      container_name: transaction-worker
      networks:
        - challenge-network
      build:
        context: ./transaction-service
        dockerfile: kafka.Dockerfile
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
  anti-fraud-worker:
      container_name: anti-fraud-worker
      networks:
        - challenge-network
      build:
        context: ./anti-fraud-service
        dockerfile: kafka.Dockerfile
  postgres:
    image: postgres:14
    networks:
      - challenge-network
    container_name: postgres-transaction
    ports:
      - 5464:5432
    environment:
      POSTGRES_DB: 'transaction_service'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
    healthcheck:
      test: pg_isready -U postgres
  kafka:
    image: spotify/kafka
    networks:
       - challenge-network
    container_name: kafka-transaction
    environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
  redis:
    image: redis
    networks:
      - challenge-network
    container_name: redis-transaction
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
networks:
  challenge-network:
    driver: bridge
